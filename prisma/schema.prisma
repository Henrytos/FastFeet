// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DELIVERY_MAN
}

model User {
  id           String @id @default(uuid())
  role         Role   @default(DELIVERY_MAN)
  name         String
  cpf          String @unique
  passwordHash String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  Order     Order[]

  @@map("users")
}

enum OrderStatus {
  PENDING
  WITHDRAWN
  DELIVERED
  CANCELED
}

model Order {
  id String @id @default(uuid())

  orderStatus OrderStatus @default(PENDING) @map("order_status")

  deliveryManId String?   @map("delivery_man_id")
  deliveryMan   User?     @relation(fields: [deliveryManId], references: [id])
  recipientId   String    @map("recipient_id")
  recipient     Recipient @relation(fields: [recipientId], references: [id])
  photos        Photo[]

  createdAt   DateTime  @default(now()) @map("created_at")
  deliveryAt  DateTime? @map("delivery_at")
  withdrawnAt DateTime? @map("withdrawn_at")
  updatedAt   DateTime  @updatedAt() @map("updated_at")

  @@map("orders")
}

model Photo {
  id       String  @id @default(uuid())
  filename String
  url      String
  orderId  String? @map("order_id")
  order    Order?  @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("photos")
}

model Recipient {
  id    String @id @default(uuid())
  name  String
  email String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  Order     Order[]

  @@map("recipients")
}

model Address {
  id           String @id @default(uuid())
  state        String
  city         String
  neighborhood String
  street       String
  zip          String
  number       String
  latitude     String
  logitude     String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("addresses")
}
