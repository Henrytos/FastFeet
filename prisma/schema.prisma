generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMINISTRATOR
    DELIVERY_MAN
}

model User {
    id           String  @id @default(uuid())
    role         Role    @default(ADMINISTRATOR)
    name         String
    cpf          String  @unique
    passwordHash String
    orders       Order[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt() @map("updated_at")

    @@map("users")
}

enum OrderStatus {
    pending
    withdrawn
    delivered
    canceled
}

model Order {
    id                String      @id @default(uuid())
    orderStatus       OrderStatus @default(pending) @map("order_status")
    deliveryManId     String?     @map("delivery_man_id")
    deliveryMan       User?       @relation(fields: [deliveryManId], references: [id])
    recipientId       String?     @map("recipient_id")
    recipient         Recipient?  @relation(fields: [recipientId], references: [id])
    photoId           String?     @map("photo_id")
    photo             Photo?      @relation(fields: [photoId], references: [id])
    deliveryAddressId String?     @map("delivery_address_id")
    address           Address?    @relation(fields: [deliveryAddressId], references: [id])
    createdAt         DateTime    @default(now()) @map("created_at")
    deliveryAt        DateTime?   @map("delivery_at")
    withdrawnAt       DateTime?   @map("withdrawn_at")
    updatedAt         DateTime?   @updatedAt() @map("updated_at")

    @@map("orders")
}

model Photo {
    id        String   @id @default(uuid())
    filename  String
    url       String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt() @map("updated_at")
    order     Order[]

    @@map("photos")
}

model Recipient {
    id            String         @id @default(uuid())
    name          String
    email         String         @unique
    createdAt     DateTime       @default(now()) @map("created_at")
    updatedAt     DateTime       @updatedAt() @map("updated_at")
    orders        Order[]
    notifications Notification[]

    @@map("recipients")
}

model Address {
    id           String  @id @default(uuid())
    state        String
    city         String
    neighborhood String
    street       String
    zip          String
    number       String
    latitude     String
    longitude    String
    orders       Order[]

    @@map("addresses")
}

model Notification {
    id          String     @id @default(uuid())
    title       String
    content     String
    recipient   Recipient? @relation(fields: [recipientId], references: [id])
    recipientId String?
    createdAt   DateTime   @default(now()) @map("created_at")
    readAt      DateTime?  @map("read_at")

    @@map("notifications")
}
